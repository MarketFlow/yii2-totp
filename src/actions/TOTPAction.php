<?php

namespace MarketFlow\Yii2\TOTP\actions;

use MarketFlow\Yii2\TOTP\interfaces\TOTPInterface;
use MarketFlow\Yii2\TOTP\models\SecondFactorForm;
use MarketFlow\Yii2\TOTP\Module;
use yii\base\Action;
use yii\base\InvalidConfigException;
use yii\web\Cookie;
use yii\web\ForbiddenHttpException;
use yii\web\Request;
use yii\web\Response;
use yii\web\UnauthorizedHttpException;
use yii\web\User;

class TOTPAction extends Action
{
    /**
     * @var User
     */
    public $user;

    /**
     * @var Module
     */
    public $module;

    /**
     * @var Request
     */
    public $request;

    /**
     * @var string
     */
    public $view = 'totp';

    protected function beforeRun()
    {
        if ($this->user->isGuest) {
            throw new UnauthorizedHttpException();
        }
        return parent::beforeRun(); // TODO: Change the autogenerated stub
    }

    public function init()
    {
        if (!isset($this->user, $this->module, $this->request)) {
            throw new InvalidConfigException('Identity, module and request must be set');
        }
        
        if (!$this->user instanceof User || !$this->module instanceof Module || !$this->request instanceof Request) {
            throw new InvalidConfigException('Invalid type');
        }

        parent::init();
    }

    public function run() {
        $model = new SecondFactorForm($this->user->identity, $this->module->allowRememberDevice);
        $cookieName = $this->module->cookiePrefix . Module::TOTP_DEVICE_TOKEN;

        if ($this->request->isPost && $model->load($this->request->getBodyParams()) && $model->validate()) {
            $this->module->setTotpChecked();

            $response = $this->controller->redirect($this->user->returnUrl);
            if ($model->rememberDevice) {
                $response->cookies->add(new Cookie([
                    'name' => $cookieName,
                    'value' => [
                        'authKey' => $this->user->identity->getAuthKey(),
                        'expiration' => (new \DateTime())->add(\DateInterval::createFromDateString('1 month'))->format(\DateTime::ATOM)
                    ]
                ]));
            }
            return $response;
        }

        return $this->controller->render($this->view, [
            'model' => $model
        ]);
    }
}